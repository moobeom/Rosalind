### Implement Greedy Motif Search ###

def GreedyMotifSearch(dna,k,t):
    first_string = dna[0]
    l = len(first_string)
    bestmotifs = [seq[0:k] for seq in dna]
    first_string_kmers = [first_string[i:i+k] for i in range(l-k+1)]

    for first_string_kmer in first_string_kmers:
        motif1 = first_string_kmer
        motifs = []
        motifs.append(motif1)
        for i in range(1,t):
            profile = makeProfile(k,motifs[0:i])
            motifs.append(consensus(k,dna[i],profile))

        if score(motifs) > score(bestmotifs):
            bestmotifs = motifs
    return tuple(bestmotifs)



def makeProfile(l,motifs):
    k = len(motifs)
    base_count = {}
    base_list = ['A','C','G','T']
    for base in base_list:                      # 염기별로 l-mer의 길이만큼 0생성 (initialization)
        base_count[base] = []
        for i in range(l):
            base_count[base].append(0)

    for i in range(k):
        for j in range(l):
            base = motifs[i][j]
            base_count[base][j] += 1 / k        # k-th string의 각 자리의 염기를 count 후 전체를 k만큼나눠서 확률로 나타냄

    return  base_count

def consensus(l,string,profile):
    nn = len(string) - l + 1
    prob_list,lmer_list = [],[]
    best_lmer = ''
    for i in range(nn):                         # profile-most probable l-mer 알고리즘
        lmer = string[i:i+l]
        lmer_list.append(lmer)
        prob = probability(lmer,profile)
        prob_list.append(prob)

    candidate = max(prob_list)
    position = prob_list.index(candidate)
    best_lmer = lmer_list[position]
    return best_lmer

def probability(lmer,profile):
    l = len(lmer)
    prob = 1
    for i in range(l):
        prob *= profile[lmer[i]][i]
    return prob

def score(motifs):
    l = len(motifs[0])
    base_list, count_list = ['A','C','G','T'], []               # l-mer의 각자리의 염기의 수를 motif별로 counting (profile)
    for i in range(l):
        count = [0, 0, 0, 0]
        for motif in motifs:
            for j in range(4):
                if motif[i] == base_list[j]:
                    count[j] += 1
        count_list.append(count)

    final_score = 0                                             # l-mer의 각자리에서 가장 빈번한 염기의 개수가 점수
    for count in count_list:
        score = max(count)
        final_score += score

    return final_score

k = 12
t = 25
seqList = ['TCGGCTCAGGACTCCTACTGGGAAGAGGCGTCATGGTCGTGGTAGATCACTCCCAGCACTGTCATATCTATAACGACTTAAGAGGCCCTGGAGGGCCATTCGACACGCTTTCCATACACCTCGGGGGGCACACTTTTGTAGAAAGGTGTCTGTGAC',
'CTTGACGATACGTCTAGCAAAAAAGGTATGACGTGCATAAGGCGGTTTCGTTCTGAGTAGCGTGACAAATTAGTAATGGATGTTGACACGACATGGTTGTGAACGGATAGTTCAGTTGTAAGATGCGGACGTTGGAGCGACGGCCCCCCTCTACCC',
'CAATTGCCTTGACCCGCCTTGATTCGATGGGTGTAAAGAACTGGAAAGATTTCCGGGACCATATGTAAAAGGTAAACTAGGTTGGATATTTCTTGGTATGTCGTCATCAAGATTTCTGCAACTTCTTCTCGGGATCCGACGTGGCATAATCTCTGT',
'TTCAGTCACCCACCTTCATCAGTTTGGTCGTAATTCCGCACTCCGCCAGAACCGTCTTGGGACCGTTGAAGGCTGACTCTCACGTCCGGGAGGGCAGCCGATGCAGCGGACCTCGGGAGCCAGACCCGACATCTGATTACATCGATAGATTTGGTT',
'GAATGGGATTTCTCTTATTCGATAATCTTGGACGAGAGTGGAGGAAGAGTGTGTGACTCAGACGCTCTATCAATACAACCAGTCATACGCATCAGGATAATTATGATCGACGCGACTTGGATGTGTTCCTGAATTACCTATTATAGTCTCCAATTA',
'TCATAGAATTCGCCCCCTGCCCTGCACTATCCAGCTTTCAGATGGAGCGCGGGGAGCAAGCAGGGCTTTTCTGCGAGAGACCGAGGCTTGTTAGCGTCTTAACGGCCTGACACGTCGTGGGAATATAAAGATGTAGCTTATTATTTCCTATACTTT',
'GAGAGCTCTGAAACACGCGAACGTTCGAGGCTTGATGACTCGGCATGGCTGTTAAGTGCTTGGCGTGGGCTATATAGCAACAAACCGGACTCCATTACAGAATAAGATACCTTGAAACAAGCATGACGTGGGGAGTACTCTTGAAGCCTGCGAAAC',
'GCATTACCATAGCAGAAGACTTCTAAACGTCCGGAGTAGGTCCGCTCTGCCAAGGTTAGGAATATCATACTCATCGCGGACCTTGAACTTTTCTAGGATACGCCTTGGAGGGGTGTCCGTCCCACGGCGCTGCAGAAGGGTTCCACCGGCCGCCTC',
'GTCGATATAGTTAGACCTTGTGAGTGATGAGCCCCACATTAGCAAATTTTCCGTGCTGGCTAGCGGTCCCATTCTCGGCTTGTGGATTCGACCTGGGCGTTCTAAGTATCTAAAACAGGGTCCTTTCCATGATCTAGTAAGTGGCTATCGCCTAGC',
'CCAATCTAACCGGATACGGCCTGGATACTACCCCCCTGGTATAAGGTTCAATTACTTACCCTAGCTATAATCGTTCCCTTTTTAACCGTCCTCTAACACGCGGTGGAACTTCCTCATTTCGCTGTACTGCTTCACGGGTGAACGAACCTCGGCGCG',
'AACACGGAATGTTATGATGGCCATGCTCTATACTAATCGGGAAGGTCCTCAAGGCTGAGTGGTTGGTTCGCCGAGGTGGTTGGTGGATGGGTACACGCGTAGCCTACCACAATTATTAGTTCTTTGGAGGCCCCTCTGGGACTCGAATCGCCATGG',
'GGCATGGACCAGGACGCAAGGCCATGGCCCCGTAAAACCACGAACAAGTCAACAGACGGAGTAAAACTTGCATCCATTGATGAGGGGAGTGCGGCAACGTCTCATATCACTATAGGGAGAGAAACGACCTGGCTAAAGGCGTAGTAATTATAGCAA',
'GACACGAATTTGATCCGTACAGGGGAGTCGCCCTGGTGCGGGTAGGGACAGCATATAAGTCAACAGGCTACTAACCACTTACGTAAGTGGTACATACTTCGCTGTGTGCCTGGTCACGCCACACGATGCACGGCCGGGGACCGTCAGGTGAATTAT',
'CGACGGTGCCTTGGCCGTTCATTCGACGGTTCTAGCTCATTCATATAGGACGCGTCGTGGAACGAATGTTCAGGTTCTACACGATTGCATTGCCCCAAGCGACTGTGAGTGGTTAATTGGAACCATTAGTTGCACTTATTACATCGAGATGCGATA',
'CCGTGACACTGCGGTGCCGAACAACAATTCTTGTCCGCGGAGAAACTCTCATGGAGAGGCGAGACGTCGTGGTCGCGGCGTTCCCTACCAACGCTAGGTTCACTGTCCGTCTAATCCCGCTCGGTGTCCACATGAAGGGCCCGGGGGATTATTTGG',
'CAGGGAGGTCGCGAGCCGTCATGGCGTGGACCGCAGGCTACGTGCTTGCCATACTCTTAGTTTGTCCTAAATTCGGCGGCCCGTTGTCCGACGTCGAGGAGACTTCCGGTTACAAGGGATCACAACCCTCCCCGGTGCTTCCCTATCGTTGATTGA',
'CGGGTATTGCTGGGTAGATAATTAACGGACATAAACCATATCTCACGGTAGCGTCAGCATGAGGAAAGTCCCGGCTTGCCAATTTCAACCAGTGTTGAGTCGGCTTGGTCGCTCGATTTAGGGCACACGCCGCGCTCTCTAGTAGTATCGAGGGGC',
'AGAAGTAAAGGCGCCACAGGAACAAAATGTCCAAAGTCCAGCTCACATCGGGAAACGCAGTAAGATTGCCATGAGACGTCTTGGTATTCTAGCGTTTTCCCCAAGGCCCCGCACCGGTTAGTGTTTCACCAACTATACGGGAGACTATGGGGTGAT',
'TGCGAGCTGGTGCGTGGGGTCCTGGAGACTGGCCCCAGACGTACGAGATTTCATCCCGCAGCCATATCGGCGAGATTGAGAAGGCCTGTACCTAGGGAGCCGCCTTGGGTACACCTTCACTCTATCAACAACCACACTCGGTCGTCTAGCGGAAGA',
'CGACCCTTCTCACGATAGTACTGCATTTAGACATCCTATGCACGGCGGTTTCATATCTATATAAGTATCCGTGTTACGTAAACAACCGCCGGCGATGAATCGTCGTGGGGGTCTCAACTGCTAATCGCGCCACACAGACGAAAGATAAGAATGGTT',
'GCGGAAATATCCCACGCACGACATCCGACGGTTGCAGGCCCCCTGATAGGGTTTGGCCCAGACACGCCATGGCGTCCGGCTGCCGAGTCAGGTGTCACACCGCTTCTCAACGAACACGTGGGAACTAAGACGGGGTACAAGCCGCTTCTGGGCATA',
'CCAGACCCTGCTTACAAGATGAACCGATAGAATGGAGAGGCGTCCTGGGATGAATCCCTACACTGAACGTTTACATGGTAGCCGCGGCCGTCCGACTCTTTACGGTGCCGATACCGGCTTAGACCCAGCTGAGCCTGCGGGCCTGAGCATGATAAT',
'CCCGTACATGCGTAGTCTCTGACCTCTTTGACAAGAGAACTTGCCCAATAGGAGTTAACTACGTTACGCTCATTATGTAAAATGCATCGACAAACAAACGGTCACAGGCCGGCATAGACCGAGTCGGCGTGGGGACGGTAGTTGAATCATCACCGT',
'GATCCGGCCTGGCCTAAGCACGGGGTGGATGGAAGTGCTTGTACTTGTGCCGTTCGCACTCGCAGTAGTGAGCCGCATATGGTACCCCCAAAGTACACTGCCAGTTCTAATCGCGTGCTTAACGACGTTACGCTTAGCGCGGGCTTTCGTGGCATG',
'CAACGGTTGGCTGAATCGTCCTGGTCATGCACTCTACGGAGTGAAGTGAGCTAAGAGGGTGCTGCATACAATGCATGGTACCTGAATCCCCGCAATTGTTGTGGAAGAGTATTTGGCACCTCTTTAATGCATACGTTCTTCAAGTCGCAAAAGAAG'
]
print(GreedyMotifSearch(seqList,k,t))