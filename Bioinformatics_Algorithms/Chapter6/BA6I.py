### Implement GraphToGenome ###

# genomeGraph containing edges should be converted into a list, instead of a set
def GraphToGenome(genomeGraph):
    p,cycles = set(),[]
    nodes = sum([[node for node in edge] for edge in genomeGraph], [])
    cycles = NodeToCycle(nodes)
    for cycle in cycles:
        chromosome = CycleToChromosome(cycle)
        str_chromosome = '(' + ' '.join(chromosome) + ')'
        p.add(str_chromosome)
    return p

def NodeToCycle(nodes):
    cycles = []
    while len(nodes) > 0:
        cycle = [nodes[0]]
        nodes.remove(nodes[0])
        if cycle[0] % 2 == 0:
            end = cycle[0] - 1
        else:
            end = cycle[0] + 1
        for node in nodes:
            if node == end:
                cycle.insert(0,node)
                cycles.append(cycle)
                nodes = nodes[(nodes.index(end)+1):]
                break
            else:
                cycle.append(node)
    return cycles

def CycleToChromosome(nodes):
    chromosome = [''] * (len(nodes)//2)
    for j in range(1,len(nodes)//2 +1):
        if nodes[2*j -2] < nodes[2*j -1]:
            chromosome[j-1] = '+' + str(nodes[2*j -1]//2)
        else:
            chromosome[j-1] = '-' + str(nodes[2*j -2]//2)
    return chromosome

sample_graph = [(2, 4), (3, 6), (5, 1), (7, 9), (10, 12), (11, 8)]
test_graph = [(2, 3), (4, 6), (5, 7), (8, 9), (10, 11), (12, 13), (14, 15), (16, 18), (17, 19), (20, 22), (21, 23), (24, 25), (26, 28), (27, 29), (30, 31), (32, 33), (34, 36), (35, 38), (37, 40), (39, 42), (41, 43), (44, 1), (45, 47), (48, 49), (50, 51), (52, 53), (54, 55), (56, 58), (57, 60), (59, 62), (61, 63), (64, 65), (66, 68), (67, 69), (70, 71), (72, 74), (73, 76), (75, 77), (78, 79), (80, 82), (81, 84), (83, 85), (86, 87), (88, 90), (89, 91), (92, 94), (93, 96), (95, 98), (97, 99), (100, 102), (101, 103), (104, 46), (105, 108), (107, 110), (109, 111), (112, 114), (113, 115), (116, 117), (118, 120), (119, 121), (122, 124), (123, 126), (125, 128), (127, 130), (129, 131), (132, 134), (133, 136), (135, 137), (138, 140), (139, 142), (141, 144), (143, 146), (145, 147), (148, 150), (149, 152), (151, 153), (154, 156), (155, 106), (158, 159), (160, 162), (161, 163), (164, 166), (165, 168), (167, 170), (169, 172), (171, 173), (174, 175), (176, 178), (177, 180), (179, 181), (182, 183), (184, 186), (185, 188), (187, 189), (190, 192), (191, 193), (194, 196), (195, 198), (197, 200), (199, 202), (201, 203), (204, 157), (205, 208), (207, 210), (209, 211), (212, 214), (213, 215), (216, 217), (218, 219), (220, 222), (221, 224), (223, 225), (226, 228), (227, 229), (230, 231), (232, 233), (234, 235), (236, 237), (238, 239), (240, 241), (242, 243), (244, 246), (245, 247), (248, 249), (250, 206), (252, 253), (254, 255), (256, 257), (258, 259), (260, 261), (262, 264), (263, 266), (265, 268), (267, 269), (270, 271), (272, 273), (274, 275), (276, 277), (278, 280), (279, 281), (282, 283), (284, 286), (285, 287), (288, 289), (290, 291), (292, 293), (294, 295), (296, 297), (298, 299), (300, 302), (301, 304), (303, 251), (305, 307), (308, 310), (309, 312), (311, 313), (314, 316), (315, 318), (317, 320), (319, 322), (321, 323), (324, 325), (326, 328), (327, 329), (330, 331), (332, 334), (333, 335), (336, 338), (337, 340), (339, 342), (341, 344), (343, 346), (345, 347), (348, 349), (350, 352), (351, 354), (353, 356), (355, 358), (357, 359), (360, 361), (362, 364), (363, 306), (365, 368), (367, 370), (369, 371), (372, 373), (374, 376), (375, 378), (377, 379), (380, 382), (381, 383), (384, 386), (385, 388), (387, 390), (389, 391), (392, 394), (393, 395), (396, 397), (398, 399), (400, 401), (402, 404), (403, 405), (406, 408), (407, 410), (409, 411), (412, 413), (414, 416), (415, 366), (418, 419), (420, 422), (421, 424), (423, 426), (425, 427), (428, 429), (430, 432), (431, 434), (433, 435), (436, 438), (437, 439), (440, 441), (442, 444), (443, 446), (445, 447), (448, 449), (450, 452), (451, 453), (454, 455), (456, 417)]
p = GraphToGenome(test_graph)
answer = ''.join(p)
print(answer)