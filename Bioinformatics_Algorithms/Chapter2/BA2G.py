### Implement Gibbs sampler ###
from BA2F import Profile,Score
import random

def GibbsSampler(dna,k,t,n):
    motifs = []
    for i in range(t):
        ran = random.randint(0, len(dna[0])-k)
        motifs.append(dna[i][ran:ran+k])
    bestmotifs = motifs

    for j in range(n):
        i = random.randint(0,t-1)

        motifs = motifs[:i] + motifs[(i+1):]
        profile = Profile(motifs)

        motif = PRGK(dna[i],k,profile)
        motifs.insert(i,motif)

        if Score(motifs) < Score(bestmotifs):
            bestmotifs = motifs
    return bestmotifs

def PRGK(string, k, profileMatrix):
    l = len(string)
    probList = []

    for i in range(l-k+1):
        kmer = string[i:i+k]
        prob = 1

        for j in range(k):
            prob *= profileMatrix[j][kmer[j]]
        probList.append(prob)
    index = random.choices(range(0,l-k+1),weights=probList)[0]    # result type: list
    return string[index:index+k]


k = 15
t = 20
n = 2000
seqList = ['ATCACGAGTCAACCTGTCGATGGAGGTAGCTACCTCCTCGCTCGATCAAACCGAACTCCCCAATAGGGAGCGGAAACTTCCCATGTGATCAAAAACTGACATTGCTGACGTTGTGAATTCGGCTTGGCTACTCCTTTTGTGTCGATGAGAAACATTGGACATCAGTACTTATGCAAAAATTACCGCAAAAATCGGATAATAAACATCAACATCTACAGTTCGCAAATTGCTTCTGAAGCTTTTGTCGTCCAATATCCACTCCAGAATGATACATGGCATTCTTGGCATGACGGAACCTCAGGCACGCCTTATCACGAGTCAACCT',
'GTCGATGGAGGTAGCTACCTCCTCGCTCGATCAAACCGAACTCCCCAATAGGGAGCGGAAACTTCCCATGTGATCAAAAACTGACATTGCTGACGTTGTGAATTCGGCTTGGCTACTCCTTGGGTCGGACGTTGCTTTGTGTCGATGAGAAACATTGGACATCAGTACTTATGCAAAAATTACCGCAAAAATCGGATAATAAACATCAACATCTACAGTTCGCAAATTGCTTCTGAAGCTTTTGTCGTCCAATATCCACTCCAGAATGATACATGGCATTCTTGGCATGACGGAACCTCAGGCACGCCTTATCACGAGTCAACCT',
'TTTCCTCGCGCTCTCGCGAAGAATTGACTCTTCCCAGAGTATCTCCTCCTCACGGTTTTGTGACCCTCACGATGGATTAGGTACTTTCATCCACAACGGTCCACACTGGGAGGATCGACTACGCGCTAGAGTGAACCATCACCAATTCATCGGCGTCGATTTCGCGCGACCCCATATAACTCTTGTCATGGAGAGCAGGTATTTAGTAGCTGGCTCAGGTGTCTTAGGGAACTAGATAAAGCTGGTCGTTTGGACGAAATGAGACGGATATGGCCAGATAGTTGCCGTTGGAAGAGGGGGTACTAGTCGTTGCCGTGGGTGCTAC',
'CTTTATCAATAGCGGTTGCGTAATTCTCCGGACAGAAAGTGAAGGACTGGGAGACAAGTTAGAAAATGTGATCGAGATCTCAGATGATAAGGGGGGCATTGCTAGGTTCTTATATTTTTCCTTTAATGAACGTTGATACCAAAATGTCCTGCCGAGGTAATGGAGACCCCCCTAGCGGTCATGTCGGAGGCTTCGCTGTCCCTCTCTCTCATACAGATATCACCTTTTACCCTGCATAAGGTAAACTAATCGGGGGATACAAAACGGTCTGGCCACTTCGTTGCCAGATGGACACACCACCAGGGGAACAACCTCTCCCCCCCTG',
'TACTTCTGGGCGTTATTGTCCAAAGTAGAGGACCGTGGAGTGTCTCATTAATTCGAAGTTGCCCTACGTCTTCTAATTCTGAAAAAGTAGTCGGACCACTGCGCAATGATGAATTAGAGCCGATGCGTACTCTGTCATGGAGACTTACGAGTTGACCTTGCAGGGTTTAGACTCTATCGAACCGTAATCAGTGACGAATATCAGAGGCCTATGACTTATATGGTGGTATTGACATAAGTTCAGAGTGGGTATTATCATGCACTGGCCGAAACGTTGCCTTATGCAGTAGCCCTGTTTCAACCTATCGTCTGATCAAAGAAACATA',
'GACCGCCACCCACACGCCGATCAATATGTCTTGAGGAGCTAGTAGTGGGTCGATCCCGGGCTTGGCGCGGCTGTACCAATTGGCGATACCTCTGCTTAGTCTGCCATTGAAAAGGACGTTGCCTAACCCCTACGTGTACTAGAAGTCTCGTTTCGCAGGCTTGGACTGATTGACCGTCGGAAGGAATATGACTCTGTCGGTCTGGTTGAGTCCTCTTAAGGGACTGTCCTGACCTCGCGAGACCGAGTTAGAGTCTGCCACACAGTCACAATATTCGTCTGACCACCATAGAAGTGAGTGTTACTCGCTACAGATTTCGTAGCCG',
'TTCCCATTCGAATCCTTTCACCGTGTCCAAAATCATGTTAGGGTTCTTTTAGGGAGTACGGATTGTCATAATTAAATGACAGAATGCGCTTTCCATGGGAGCAACGCTGATCATAGTTTGAAGATGAGTTCGTCCGTCATATGTGCTTACGGTACACTATTGGCCAGGAGTGTGCCTAAACAGTATCAGCCCGATCGAATACAAAAACGCCTCTCGTCTATGTGCACTCGTCGCGAGGGGAGGGCGCGTCCGGAATGAAGACATCCTCTACGCTTTGTGACGTGAAGTATAGCATACCCAATTAGTCTGAGCCTTTACACGATCA',
'GAATGAGGTCGCACGACATGTACAGCCGCCTCACGCCATTTAATAGCGAGAAGCTTGTCTGTCCTGTAGCGTTATACGTGCAAGTGGCGCGAGGAGATAGGCGTGACATAGACTTATTTAATAGTAAGAATGGCTCGAACAAGATAACGTGTTTTTCTTAGATTTAGAAAAGCCGCGAATAGTTCGCGCCGCGGGACCTCCTCAACCGGAGCACCAAATAGACCTCGACACCTGGTGGACAAAAGATGAGCCAGGACGTTGACCTAAACAGGGAATTTCCCTATCTCGGATCAGCTGTCTACTGTCGAAATGTCTATTTGCAGCA',
'TTCCCGACGCCCGTCGAAAAACGTTAATGTGACAGATAGGCACAAACGTGACGTCCCCTGGGTGCGGCCCCGGAAAAGTTTAAGACTCCTTTTCCAGACGGACCCTTCATGTCTGCAGGCCAATCTGCTCTTAATATGTCTGCGGAGGTGGGTAAATCCGCTCGGCTACGTGCGCAAGTCGGCCTGTGGCTCAGACGTTGCTTTCAACCAACACTAGAATAAAACATTTCATAATCCAAGCATCCAAAGTCAGCGGGACACACCCTTCGGCCCTTTGTAAAAAAGCGCAAGGATGTGAGTACTCATCACTAACTTTGCGCAATAG',
'GAGTCCGATGGGAGCAGGAGGTAGCCATCCGTCCCTTGTACATTACTTCGCTTGGGAAAAACTAGTTAATGCGAGTTTGGCCACCGCGGGTTTTGCCGGGGGAGCCATGGATATTGGGCAAGTGCCTAGGATCCCGTTCGTATAGCCGGACACTCGGTCTTAGTCTGGTCCTCCTTATAATGTTCGCGAGCAGCTCGGAAGGAGGACATCGGTTCCCTATACGTGCTGGTGAGGGCCGCGCAGTTGGCCATACCGTTGCTTAACCTCTTAAGGTGCGTATGCTAGCTCCAGTCTCGATGGATAACATCACTCTCTATGGGGCTTG',
'GTCTCAGAAAACTAGTGCGTCTGCCGGCCGCAGTCCTCCCATGCGCTAGTGAGAAACATAGCTCCAATATACAGAAATTTCAAGGCAAGCGCCATGGCCGCCACGTTGCGATTTACTTAATCCAAGACCTAAGTTATGCCCGATTTTCGTGTGCAACACCTGGGAACACTATGGTCCTACAGGACGCTAGACGGCCAGTAAGCAATTTATATACACGAGCGAGCACAGTGTAGCGGTGTGGACAGACTATACAATCATAGCCTATCATCGATTGTGTGGACGTACACTCCCCTGCGTAAACCGTTAATTGGGCCCAGGAGACAAG',
'TACCCGGTAGCATGCACTTCTAACAGGTCTAATTACACGAATAGAGTGGGGGGTACGCCGCTCCCTCTTGTACGGTTCACACGAAACTATCGACCCACAACAAAGTTCAGCTAAAACCCCTATGCCCCTACGGCATTACAATAGTACCAATGGCGGGTCACGAGGCTTGTCTCAAAATATTCGCAGGACGTTGCCTCGCGGGCGTGGTCAATCCGTGTGGAGCTATGTACTGTCTAAAAGAATAGCCGACCTTCCATTTATAGTTATACCGGAGACGAGTGCAAGAACCATGTGAGGGTCCGAATGCTGGCTGCTCCCCCTCGGC',
'TGGGCTTTCTATCAATCTCGTTTCCTAGAGTTCGACATACTAATGATAGTGTATATCAAACATCAACCTTAATCCTTTTCTGTGGAAGGTCCACGAAACGCTCGTACAGGGTTTCGCACCTTCACGACGGTGAGGTTCCGAGGGAACACCCGTCATATAGCTAGCTCGTGGACCATCCCATGCCAGCTTTCCAGGTTCAAATGTACCCGTAACAATTGAGTGCGAGATCTTTCTTGTATCAAGTGTGTCTGGCATTGACGTTGCGCAAGTGAACTGTCTATGACTGCTAGTACAGCTCCTATTTTGATGTGCTCATCTTGTGCAG',
'GAAACTACATCGCAAGACTAACCGGGGGCCGATTAGGTGCGGAAAGTGCCCCCTGCCTGAGGCGAGACTGCGACTACCCTCCACCGATACACCGCTCGCATCCGAGGCATTCACGAGCCGCTCCTGACCCAACCTAGAGGGGCCATATTCATACAGATCATCAATGGGTTGCAGCATGCGGCCGTAGGCCGAAATGGGAGGGACGTTGCCACTAAGCCGCACTCGCCGCAAAATGTCGCCCGCTCTGATATAGATCAGGTTGCGTTCTTAGGGTCAACTTTCCCGAATACAAAGCTTAAACTTGTCCATGTACCGAGTCGCTGTC',
'TGATCTTTTGGCTTCTATAACCAAATCGATGCGAGGACGATCTGACTAGCTACGTCATCGTGTGTTTGTTCCTGTGAACTACCGGAAATCACGGCGTTCATAGAAATGGATCCTAAAAAAACCATGCCATGGGATCATACTGCGGGAAGCCTGACACCGCCTCGTGAGCTAGGGCCAGGACGTTAACGACCTAGACAACGTTCTGTGCTCACAACAGGTGTCTCCTACGTTATGAAATGCCAAGGCCCATGCCGTGCATACCTGCCTAAGGGCGTATTCTAGTAGGAGTTCGAAGCGGTGTACACCCATCCCGGCATCGTTGGCG',
'GCGGTCTCACTCCCTCGATAGCCCGCGCGTTTAGCGTGACGTCCCACGATGGCCACGAGTTGCATCCTAAGTTAAAACGTTTGTTTATAACTGGGTACGACACAAAGCAGCAACAAGCGAGTTGGGGTTCGAATAAAGATTTCCTCAGTCCGGCAGGCCACTTTAGCGCCGGGCTCCTTTGGACACGTCTCCTTTGTTGCCCCGATCGAGGGATAGCACACCAATCGGAAACGATTACTCAAAGCTCCAAGTGCACAACCGGAAGGACGGCTTGGTGCCGATTCAACATATCGATGATAGATGGCCAGGACTCCGCTTGGTTTGT',
'TTTGGCTGTCGCCAGGGGCACCAACATATACGACTGCCTGGATAGGGCTTACGGAATCGGGGATCCGGGTCGTTCGGCGCTTAGACGAATAGAAGGTACGTGGTATAACATATGGAGTGAAACAAAGGGGGGTCAGAAACCCATGCAGATGATTTATACGTGGATGAACACCATGTAAGATGACAACGACGCAGGGGACGATGCTTCTTCTTTTCACTTATGTTCGAGTACATGGCTATCCCTGGCCAGGACGGGTCTGGACTGTTACAGCTCAGCACGCCGTATATGGCTAAGCCGCGATCCCAAGTAGCTACGAAGTGCGACT',
'GAACTTTCTGGCCTATCGCGAAATGATTTATTAAACTAGGAGAATACATCCAGAAGCCGCTACTACTTCTGGCATCGAACACAAACATAGATGCGTGTCGGCCGCAGTCCAACAAGGCCTACTCAAGGCTAACTCGACGCGGAAACCAATACCAGTCTTATCCACACATAAACTGTTGCACCATGGTGAGATCTACAAGTACCCCTCGCATCGCTGTTGATTTTACCACCTGCATGGCTTATCTCGGGTTTCAGATGCCTTCGGTCCCCACATAGAATAGCATAACCCAGGACGTTGCCTAGACTCAAGCTACGCGCTAGGTACC',
'ACCTCTTACCAGCTTGGCCAGGGACTTGCTTATGTTACTAGTGACTGGCTATGGTGGACCCGTTCTAATGGATCGACATTCAAGCATATGCGATTCATTTCAGCATAACCCCTTCAAGTGATGTTACAAGAATATACGTTTGCGGCATTCGCTAAAGAGGTACAGCTGGCACCGTATTATCGGTCCCCATAGTGCATCGACTATACTAGTTGAGGACATGGTTTGCTGAGGTTAGTTGCGGAGACAGCGGGATTAGTTAGAGTACCAGCACGAAGATCAACGTGTGTGGGCGACCGCTCCCAAGGGAAACAAACTGTCTGTACGA',
'CACGCGCTACCCTCCGGATAAACTAGCGGATTCGTCGAGTCCCGTGGCCACTGACCCAGTACGCCTAATCGTCACTTAGTGAGGCCGGCGTATTATACCTGCCGCTGGTGGTGCAGGAGGGGCGTCACTTCTGTGCTTGAGGATCTACGATGGATAAACTCGTATAATGGTCTCGTGGATGAGATTGCCGTGAGCAAGATTGGCCAGGACGTCTACCTTTATCAAGGTACCTCTCCGCCGACACATATGGCTGGGAGAATGACGTAAAATACAACTTTGGGGTGTCTGCTCCTTGAGAGACCACTTGGACGTATCTAGACCAAGC'
]



def MonteCarlo(repeat):
    bestmotifs = GibbsSampler(seqList,k,t,n)

    for i in range(repeat):
        motifs = GibbsSampler(seqList,k,t,n)
        if Score(motifs) < Score(bestmotifs):
            bestmotifs = motifs
    return bestmotifs


bestmotifs = MonteCarlo(20)
answer = ''
for ans in bestmotifs:
    answer += ans + ' '
answer = answer[:-1]
print(answer)