### Trim a peptide leaderboard ###

mwTable = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99, 'T': 101, 'C': 103, 'I': 113, 'L': 113, 'N': 114, 'D': 115,
               'K': 128, 'Q': 128, 'E': 129, 'M': 131, 'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186}

def LinearSpectrum(peptide):
    subpeptides = [peptide]
    for unit in range(1, len(peptide)):
        for i in range(len(peptide)-unit+1):
            subpeptides.append(peptide[i:i+unit])
    massSpectrum = [0]
    for subpeptide in subpeptides:
        mass = 0
        for i in range(len(subpeptide)):
            mass += mwTable[subpeptide[i]]
        massSpectrum.append(mass)
    return sorted(massSpectrum)

def LinearScore(peptide,exp_spectrum):
    theo_spectrum = LinearSpectrum(peptide)
    score,checked = 0,[]
    for mass in theo_spectrum:
        if mass not in checked and mass in exp_spectrum:
            m,n = theo_spectrum.count(mass),exp_spectrum.count(mass)      # m: multiplicity
            score += min(m,n)
            checked.append(mass)
    return score

def Trim(leaderboard, exp_spectrum, n):
    scores = sorted([LinearScore(peptide, exp_spectrum) for peptide in leaderboard])[::-1]
    trimmed_leaderboard = set()
    if len(scores) <= n:
        trimmed_leaderboard = leaderboard
    else:
        cut = scores[n-1]
        for peptide in leaderboard:
            if LinearScore(peptide, exp_spectrum) >= cut:
                trimmed_leaderboard.add(peptide)
    return trimmed_leaderboard

leaderboard = 'YNMNSHDRQPNFPERKGGCFILMWEISNINNCSRVPR RTLRLHAFLEAVVNLGDIGQWVQEYCGSTQWVDSVDG SMCKDDAKSWPEMMATTYSNLCSCWLDYYNGIILYMG SERRLPDFNPSAIGTGQNASEEESSYASRNWTHYSTH IDEQYMYTDWHQMRVARWTKGNREEQMILFNNYKDWW TFKDSYWLPSIQTVSGALRELYCQTQLIQGAFFFDWN YAHHFPFTGVYTFQQGWCREWDGDWQYSRINMLVYEF HVHATLCVNSFIIRAHYAMSWPEQICSLRMMFQFHYT RCHAKCMRVLAKHAKSTGGWILVTWDMCQSYRYLELP SILKSEWMTWVQMITCRPLWTAFSMVTPTAAVCYLNN HESGFAGPWYEMCQTWTIEFQCQGRAFSAWTPMTEGH PHPVIDESLQCLPPGMRKVKRTMNHYDSMTWCTNPTR WDKATTFPSVQYNDKRGRCLNDQEENKWIPGFATRHG VIWYQGISDQGWAVDVVLWVFDPLCSFGNDVNQELWH QKWYCSVIKRRRPWAVFHWEQGYATIKSEGYFSDFPW PMLYNVRNCSFACYGIPCGCDQQVCCSFNVTFRHFTH ITTMGLLVMNNCGTTQQDTWPCRNKITCWFHISLEAI'.split()
spectra = '0 57 87 97 97 101 103 113 113 113 113 114 114 114 114 115 115 128 128 128 129 129 131 131 131 137 137 137 137 156 163 163 163 163 163 163 186 186 188 194 194 200 210 215 217 227 227 242 243 243 244 244 251 252 256 257 259 266 274 277 277 283 284 287 291 294 294 294 300 300 300 301 301 301 307 325 326 346 356 356 356 357 358 364 366 371 372 378 380 380 385 390 397 398 401 402 408 414 415 415 419 422 422 430 437 437 438 438 457 459 463 463 470 479 484 488 493 493 495 500 502 509 511 515 516 520 521 521 531 535 548 550 550 551 552 552 558 560 564 571 573 578 578 600 600 600 601 607 608 608 615 622 632 640 645 649 651 652 652 657 659 663 665 665 674 674 678 679 679 684 686 701 706 709 710 714 715 715 722 736 737 745 746 753 762 763 764 773 778 787 787 788 788 793 794 794 794 803 807 808 815 815 816 825 834 838 846 849 859 859 867 872 873 877 878 878 891 900 901 901 901 906 908 916 917 918 921 922 925 936 945 950 953 957 963 972 975 978 980 988 988 1001 1004 1005 1009 1009 1011 1014 1015 1030 1030 1030 1032 1034 1038 1041 1050 1064 1064 1071 1073 1078 1081 1082 1088 1089 1101 1102 1108 1108 1112 1115 1116 1119 1143 1144 1152 1161 1163 1164 1165 1167 1172 1172 1172 1174 1178 1195 1201 1201 1202 1205 1209 1210 1215 1218 1226 1227 1245 1257 1264 1271 1274 1275 1278 1279 1281 1282 1301 1303 1305 1309 1315 1315 1315 1318 1323 1331 1335 1338 1351 1355 1358 1358 1364 1365 1368 1373 1388 1389 1394 1396 1402 1408 1416 1416 1429 1438 1445 1446 1452 1464 1468 1468 1472 1473 1478 1479 1481 1486 1489 1495 1499 1501 1501 1509 1518 1525 1530 1536 1545 1552 1565 1565 1566 1575 1582 1582 1582 1592 1602 1602 1604 1609 1609 1612 1623 1631 1632 1640 1642 1662 1664 1664 1673 1679 1679 1681 1689 1693 1695 1697 1712 1716 1717 1719 1723 1729 1730 1733 1745 1760 1772 1775 1776 1779 1792 1794 1795 1801 1818 1824 1826 1826 1827 1831 1834 1842 1846 1858 1861 1866 1875 1879 1882 1883 1886 1889 1889 1908 1916 1923 1923 1931 1955 1958 1960 1964 1974 1979 1980 1987 1989 1989 1989 1994 1997 2002 2003 2010 2020 2020 2021 2045 2045 2068 2077 2079 2086 2088 2090 2095 2102 2103 2116 2117 2118 2123 2125 2133 2152 2152 2160 2166 2173 2182 2182 2183 2190 2204 2214 2216 2223 2231 2232 2242 2251 2254 2265 2276 2279 2280 2280 2283 2288 2297 2319 2327 2329 2333 2345 2345 2346 2377 2379 2379 2379 2382 2390 2391 2396 2411 2417 2434 2436 2442 2443 2446 2459 2466 2482 2483 2490 2505 2510 2510 2519 2520 2523 2524 2540 2542 2545 2560 2567 2579 2580 2596 2597 2620 2632 2634 2634 2636 2638 2648 2653 2654 2673 2673 2673 2677 2680 2697 2711 2717 2746 2747 2762 2763 2767 2767 2776 2783 2790 2794 2801 2804 2812 2814 2836 2861 2876 2880 2880 2881 2883 2890 2891 2897 2927 2932 2939 2957 2967 2977 2990 2994 2994 2998 2998 2998 3004 3019 3044 3053 3070 3088 3090 3091 3095 3095 3113 3118 3127 3132 3157 3175 3182 3184 3184 3192 3198 3204 3242 3246 3251 3255 3281 3288 3295 3299 3305 3312 3313 3338 3354 3370 3378 3383 3396 3409 3426 3428 3441 3441 3451 3468 3491 3493 3498 3525 3540 3546 3554 3554 3555 3556 3597 3606 3622 3653 3661 3668 3668 3677 3684 3684 3710 3735 3750 3781 3792 3797 3797 3805 3824 3847 3863 3878 3910 3911 3920 3944 3961 3978 3991 4024 4041 4048 4075 4076 4106 4154 4161 4163 4172 4203 4262 4276 4285 4300 4349 4359 4413 4446 4456 4462 4543 4559 4569 4656 4656 4769'.split()
print(' '.join(Trim(leaderboard,[int(spectrum) for spectrum in spectra],5)))
