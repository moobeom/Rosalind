### Implement Randomized motif search ###
import random

def RandomizedMotifSearch(dna,k,t):
    motifs = []
    for i in range(t):
        ran = random.randint(0,len(dna[0])-k)
        motifs.append(dna[i][ran:ran+k])
    bestmotifs = motifs

    while True:
        profile = Profile(motifs)
        motifs = Motifs(profile,dna)

        if Score(motifs) < Score(bestmotifs):
            bestmotifs = motifs
        else:
            return bestmotifs

def Profile(motifs):
    n,k = len(motifs),len(motifs[0])
    matrix = []

    for i in range(k):
        base_count = {'A': 1, 'C': 1, 'G': 1, 'T': 1}  # applied pseudocounting of Laplace's Rule of Succession
        for j in range(n):
            base = motifs[j][i]
            base_count[base] += 1
        t_profile = {'A':base_count['A']/(n+4),'C':base_count['C']/(n+4),'G':base_count['G']/(n+4),'T':base_count['T']/(n+4)}
        matrix.append(t_profile)
    return matrix

def Motifs(profile,dna):                                # motif 일괄생성
    k,t,l = len(profile),len(dna), len(dna[0])
    motifs = []

    for i in range(t):
        string = dna[i]
        prob_dict = {}
        for j in range(l-k+1):
            substring = string[j:j+k]
            prob = 1
            for a in range(k):
                prob *= profile[a][substring[a]]
            prob_dict[substring] = prob

        m = max(list(prob_dict.values()))
        motif = ''
        for kmer in prob_dict:
            if prob_dict[kmer] == m:
                motif = kmer
        motifs.append(motif)
    return motifs

def Score(motifs):
    t, k = len(motifs), len(motifs[0])
    total_score = 0
    for i in range(k):
        base_count = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
        for j in range(t):
            base_count[motifs[j][i]] += 1
        score = max(list(base_count.values()))
        total_score += (t-score)
    return total_score


def MonteCarlo(dna,repeat):
    bestmotifs = RandomizedMotifSearch(dna,k,t)

    for i in range(repeat):
        motifs = RandomizedMotifSearch(dna,k,t)
        if Score(motifs) < Score(bestmotifs):
            bestmotifs = motifs
    return bestmotifs


k = 15
t = 20
seqList = ['TAAAGAACTGCCCTGCGCAAAGAGTGTTAGAAATGTCGAGTAGATCACTACGGTAGTTGCAGTTCAGGAATCGGCTCGCCCGTGGGAGGCGGCTATAATACTCAAGTAGAGCAATCCCGCAGTGGTACCAAAGCGAATACGTCTTCTCCACATGTGTTCGCTCCCGGTGCGGTCATAACAAGGTCCCGTAAAGAACTGCCCTG',
'CGCAAAGAGTGTTAGAAATGTCGAGTAGATCACTACGGTAGTTGCAGTTCAGGAATCGGCTCGAGCGAATAGAGGCCGCCCGTGGGAGGCGGCTATAATACTCAAGTAGAGCAATCCCGCAGTGGTACCAAAGCGAATACGTCTTCTCCACATGTGTTCGCTCCCGGTGCGGTCATAACAAGGTCCCGTAAAGAACTGCCCTG',
'ATAACGAGGACCTGAGGGCAGGAGGCCAGATAACCGACTTGCTAGAGGCGTACCAAATGGCGCTTTGCGTGGGATATTAGCACACACAATCCGCTCCATTACGCCCGTGGTGTCATTCCTTTATCTGCAGGTCAAGCGGTAGTGAATGACCGTATTGCAACGACAGATTTCCGCCATCTATGCTAGTACGACTTCACTAACTC',
'GTTTATAGGCGGTTGGAAGCGACTAAATAACTGCGGACCACGTTCCTGGCCCAGTGCTCCCCCGCGATCCTACTGTTCGCATTATTCGTTATGCGGATAGGGTAGCGGTGTGTTATCTAAATCAGTCTTTAGAACTGCGGCCGGTGCATAGATACGCTTTATTATGGTGCTGGTCACCGCATACTTGGAGGTGAGCATCCTCA',
'TCCCTATGAGAAGTCTGAGGTTAAAAGCTGTCGCTGGCACGGTACCGTCGGTACATGAATGATTATAGACGCCACGAGCACCTCCGCTGCTATGGTTCGCTTTCCTTACGGATAATATTGTCATCTGGGGTTCGAGAGCGAGAAACTAAACGCGAGGTATTCGAATGCTTCCGACGACTAAACGTAGGCGGGGACCCGGAAGA',
'ATCCACAATAAGGGTTCACTGACATCTAATTGGCTCGGTCACAATTCAGACTTCCACTCCTATGGAGCTCTGATAAGACCACAGGAAGACGTGAAAGGGAACCTAAATAGAGGCCGGTCGCCCTCATGTTGCCTTCGCTCGAACTACGGGGTCATCTCTTCGTGGTAAGACTAGACGGGTCTTGTGTGGCTTAAATTTATTGT',
'TTCATAGCTTGCGCCCAATGACTCTAGGGCGTATTTTTTAAAAGGGCTAAATCGACTCCCTAGAGGCTAATCTCCCGGTGAGCATGGCCAGATAGGAAAAGGGACCGGTGAACCGGCTTAGATCAAGCTGAGTCACCTCAGGGAACTACTAAATATCCGCACAACGCTGAGAATGTGAATAGGTGATCTCAGTTTCAGCGCTG',
'GCACTACCCATGCGACTAAATAGGTCCCAAAGGATCTTTGGCGTGACTCCCATTACCCCTTAGTAGTCTTTAACGCCATTCTAGCGGCCGTATTGTGTACTCCCATAGGGTAAAGTACACAACGCGGGCCACCCAATTAGATGGCCAATTTATAACATTAGCAGACAAAGAACATGTCATACTCCTGGAACAAAATATGCCGC',
'TGGGAGCCCCAAATCTATATGCTATCCCTATCATGAATGGCTGGTAGTACGACTTCGCGATAAAACTGTTGAGATTCACAACTTAGAAAGCAGCGTCTGTAGGTCGTCTGCACCGCTCAAGGTCGCAGTGTCAAGTTAAGCGATGTGAGCGCTCGGCGGCACAGTTCATACACACCGATTGTATAATTGACTAAATAGAGTTA',
'GAGGCTTGGCTACTACCCGTTTCGGAGTGGCCCGCGGCCGGTCGAGCGTCAAGGCGACGCCATAGAGGCGGCTGTTGGGTCGCTTCTCAATCAGGGAATACATTCCAGGTAGATTAAATTCAGAAGTTGCTAACGATCCCGATTGAGAAAGAGTGCGGCGGAGCAATAACCTACCCTGGCGTCCACCCCCTTGCCTTTCGTGC',
'CCTGCTCACGAGTTCTAGACCATGGGTCATCAGCCTGTTTAGGGGGTGTTACGACTAAATCTTGGCGCTGTAACCAGGAAGCTTTCTCTCAGAGAAGCTACCAGTATAAGGGCTGCTAGCACCATACGAAAACCGAGAGATCGTGCCAGGAGAACCTAGTGAGGGTGCATGCAGTCCTGATACTACCCAGTTCGCACAAACCA',
'TACACCCACCAGCATGCTCCGCTAATGTGTCGTGCAGTTGCAATTCTGTTATGATTGGAGCGGGAATTCTGGCGCTCTGATTGATGTCCTGTGCTTTACAGCCGAGAGTCCGGAACGCTCAAGCTGAACGAGAAGACAAGGGTAGTACCTTCGACGGCATACCCCGAGCACGACTAAGACGAGGCTAAACAGCCCGGTGCAGT',
'CAGTATGAGGATATAGGACGTTGGCGTTGAGATAACGACGGCATAGAGGCCAAGAGTGGCTCGATGTGCTAAACTTTTGAGAGCTTCTATACGGGGGATCATTGTTGGCTAAAAAGAATGTTTAACTTTAGAAGCAGACCGTCGAAAGGTTTCGGATTCCCCTGGGGGAATAATCTCCCACTTATAATCCCTTACATCGCTGC',
'CGACTAAATAGAATAAGTGTGGTTAGATGTGGCAGCATACAACCATCCAAAACATCTCCACCCAGCTCCAAGACACGATATACCGCGAGGCTTTCTAATTAACTGTAGTTTCCGTGCGTAGCATGTTGCAGAGCTACTCGTTAGCGGAGCAATCTGTGACTTTCCAGCGTTGCCATTGAGCCTCCGCACATCGAACCAACGTA',
'GAGTCCGTCGATCTAGAAGGTAAAGGTCAGCATGCAAATATTTCAACGTCGCGGTAGCAAAATTTATGTGGATACGTTACCAGGAAGAATACCTAGTCTGTTGAGTACTCAGCCCCCAAACGAGTTTCCCTTTCGGTGATCTATGACCTCCCGAAAGAATAGAGGCATCCGGATTCAGGGGTCGAGTCTTAAGTGTAAGGTCT',
'CAGGGCACTGTGAGTATACTCCGGCGGGCACGGCGAAACATCATAACTATCCAGTCCCCGTTAGGCCCTAGACGGCGGTCTCCACTAACCTCGGGACGACTATCGAGAGGCCGTTTCTGCAGAATTTTGACGTAATTCTGCGGCTGCATTGATGCAGGCACAACAGTGCCCCATGCGAGTTTTCGGGTCAACAGGTCAACTCA',
'GGCTGAGTACGGTCTCTAATGTTGAAGGGAGCGTCCATTGAGGCTCTGTCCTCGACCGACTTCAAATCTGTCACTAAGTACTGAATCAAAGGAATCTACGACTCGACATCTGACAGGCCTGCAAGACTAGGTCATTACCGACAGCGTGCGAAGAGATAGACTCGGTACGCTCAAATAGAGGCGATGCCTAATCAGCCTTTACA',
'GCGGTAATGCTTAGTGCACCTACCGATCTTGACGAAAACTAGTCTCGGGATCGAATTAGTTGACTCAATACAACCTTTAAGCACTTCAGCCCTGCAGCAAACCCAGGGGCGACTAGCGAGAGGCAAATCTCAGGTGGTGGGGTATGAGTGCATGAAAGACCGTAGGACCCAACAGTTTGTTGCCCGCTGAATTCGAGTGCATC',
'GAAAAGTCCCCGCTCGAGTAAGGTGTTACATGAGTCTCTTTGATATGGGCACTTTTGGAAAGAGGCTTACGAAATCATGGAGCCCAGGATATGAGGTCCGCCATCGGCACTAAACGGAACTGGATGACTTGGGTCATCTATCACGTCACCTCTTATATTACTAAATAGAGGGAGTCCGCGAACGCTCTCAGGTCCAGCGCAAT',
'ACTTACCGCTTACTATTCCTCCAGCGCGAGCACCCAGCGTCCAACTCTATGACAGTTTGTGAGAAAATATGGGCCATGGAGGTGACTCTGTGTGGAGGGTCCATGTAAATAGAGGCTCTGATATGTTTCTATAACTACATCGCAAGATGCTACCTCGTAGTGTAGACTCAAGCAAACTCACGAACACAGCTACCGACTACCAC'
]


bestmotifs = MonteCarlo(seqList,1000)
answer = ''
for ans in bestmotifs:
    answer += ans + ' '
answer = answer[:-1]
print(answer)