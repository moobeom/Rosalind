### Construct the de Bruijn graph of a string ###

def PathGraph(k,text):
    edgeList,l = [], len(text)
    for i in range(l-k+1):
        edgeList.append(text[i:i+k])

    inNodeList, outNodeList = [],[]
    for edge in edgeList:
        inNode,outNode = edge[:-1],edge[1:]
        inNodeList.append((inNode,edge))
        outNodeList.append((edge,outNode))

    adjMatrix = []
    for inNode in inNodeList:
        for outNode in outNodeList:
            if inNode[1] == outNode[0]:
                adjMatrix.append((inNode[0],outNode[1]))

    return adjMatrix

def DeBruijn(k,text):
    #gluing identically labeled nodes
    adjMatrix = PathGraph(k,text)
    nodes = [nodes[0] for nodes in adjMatrix]
    glued_matrix,checked = [],[]
    for node in nodes:
        if node not in checked:
            fork = []
            for pair in adjMatrix:
                if node == pair[0]:
                    fork.append(pair[1])
            glued_matrix.append((node,fork))
            checked.append(node)
    return glued_matrix



k = 12
string = 'TCCACAACCGGACGTCGCAACTAGCTTGAACTAGTTCCGCAAGCGTAAGTCTGATCCATGCTCAAACCCTTGATACACACAACCGTCGAAATCTTAAGTCTGGCCATTAATCGCGCATCGCCGTACAATGCTGCCCACCATCTGGGGTGGCAGTACTTAATGGTGTATTTTCTTCTACGATGAAGAATCCCGGGGCGAGCACTGACGCAAGTTCGTCCTTAGCGTAGGGTTCGGAACAGTAGACTCCTTCCGGCCAGGGTCCGCCTTAACGGATAAGTTTATTTTACGTTTAGATTACCGCTTGCGTACGAAGGGTAGAGTACTCAATCTCTTGACTATCACGGTACCGTCATTCCTATTTGGTTGGTCTATAACCCATAATGAAAGCGGCTAATCACATCCTGTTGCAGAGATTCCATCGGTGTTTTACAGCCCAGGGCGTCGTAACCAGTTAGGTAGGCTTCGTGCAACCTCGTAGAGAACCGGACTTATTTTGAGAATAAATTACAAGGCTTCTATTGACCGTTAGGGGCCCATCTCGTGTTGTCAGAGTTTTGGCGGAGAGTATCACAGCGATAGTTGACTTTCAGTGACCTGCTCGGTGGGCGGCGCTCTGACCAATGAATCCGACATTCGCGTTCTATCATGCTAAACTTTCACCTGAACTTGCTACGCAATCTTAATCCAATGGGCGTTGCTCTACCTCCGTGAATCGCGCACGCTATCTACACAAAGGAGTAGTGCCACTATAAGCTTTTAAGCGTCGTGTGCCATCCCCGAAGGGGCCTTACACTACAATGATGCATAGTGCGTAGGTGCCAACCCCACGAAGTCGCTCGGATGTTAGCGTCCCTTAGCAATGTCAGACGGGGATATTTTCGACGTGCCCCGAACACAGGCTATACCCACGGCCCCGCGCGCGAACTCAATAGATATTTTAACGGTGTAGCAACGACCTTACCTTACGGCAACTAAGAATTGAACGCCAAGGTAAACAACCTCCATTTCTATGAGGAAGGCTGACGTAGTCCCAGCTTGTCTACTAACACATGTATGTTGGCAGGGCGCTTTACTGCTTCCTGTGGTTGCCAGCAACCTTGCTGTGCCTGAGAGCGCTGAAGATAGATCTTCTTCTAGGTCACGGTTTTGAGCAGAGGTCCCAGGACCCTACCGAGGGCAACATAAGAGGGCGATCACAAGGACAATCCTAGCTGATGCGCAGACAAATGAGAGCTTGAGGTCGATATCAAAATTCTCCGCATGCGGTTAGCGCGAGAGGTAGGCATAGAAGTGGACATCACGGACATAGTGCAATATCTTCTGATACCGTCATACCCAACCGGTTTACAACCCTCTCTCTAGAGTGTCGATCTTGAGGTACGGAGAACACGTTAGTTCCCATTCGACCTTGCAAGAGTGACATACTCCTGCAGACCCTGGGCCTCCGTTGTGAAATGTACAGGAGATCACTTTCATAGATAACCTCTATGCGGCGCGGCACCGGCTCTAATATAATCCCGTGTTGTATACAGGCCTAGGTTTTGTGGTCGTCTACAAATCCCCTACAAATAGTCTCACCTGCCCTCGATTTCCAAGCGTTCGAGCCACGCTGGCCGCTTCCTCAATTCGTGACTTTCTTGCCCTCATAAAGGAGCGTAGGGTTTCGGCACGGGCCTTAGTTATTTACTCCTAGTAAGCTTGGAGACGAAACGCATGCGTGGTATCCGAATGTGTAGTACCACGTCGTTTTTATTATGAACTTTGAAAAGAGGGTAGAGATGCCGGTACAGGGGACAATCGTAGCAGTTCCAATGCTTACCTTTTCTTAGCTTGAATAAGTGCTGAGCCGCTATTAAACATATCAAACTTGCCATCTTTATGCATGAGTGAAGAAAGGACGTGCGTTCATAAACCATGTAAGCCCCTACAAGCCAAGTTGGCCCGTCTTCCTCCGATTACTCCGGAAGCATTTCGGAGCGTTCGTTCATAGCAAGATAGAA'
pairs = DeBruijn(k,string)

answer = ''
for pair in pairs:
    answer += '{} '.format(pair[0]) + '-> ' + '{}\n'.format(','.join(pair[1]))
answer = answer[:-1]
print(answer)