### Compute the score of a linear peptide ###

mwTable = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99, 'T': 101, 'C': 103, 'I': 113, 'L': 113, 'N': 114, 'D': 115,
               'K': 128, 'Q': 128, 'E': 129, 'M': 131, 'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186}

def LinearSpectrum(peptide):
    subpeptides = [peptide]
    for unit in range(1, len(peptide)):
        for i in range(len(peptide)-unit+1):
            subpeptides.append(peptide[i:i+unit])
    massSpectrum = [0]
    for subpeptide in subpeptides:
        mass = 0
        for i in range(len(subpeptide)):
            mass += mwTable[subpeptide[i]]
        massSpectrum.append(mass)
    return sorted(massSpectrum)

def Score(peptide,exp_spectrum):
    theo_spectrum = LinearSpectrum(peptide)
    score,checked = 0,[]
    for mass in theo_spectrum:
        if mass not in checked and mass in exp_spectrum:
            m,n = theo_spectrum.count(mass),exp_spectrum.count(mass)      # m: multiplicity
            score += min(m,n)
            checked.append(mass)
    return score

peptide = 'ALNGRIKARAQEVHEGTHFDACMTCLWHQFEDHQQAVQVWIMGQQTTVP'
spectra = '0 57 57 57 71 71 71 71 71 71 71 99 99 101 101 101 103 103 103 113 113 113 113 113 114 115 115 128 128 128 128 128 128 128 128 129 129 129 131 131 137 137 137 137 147 147 156 156 158 170 170 171 174 184 184 185 186 186 186 188 199 199 199 199 204 204 208 212 212 216 216 227 227 227 227 229 232 232 234 238 240 241 243 244 244 252 256 256 257 260 265 266 270 283 283 283 284 284 287 295 298 298 298 299 301 303 305 311 312 313 314 315 315 316 317 317 318 323 323 323 328 330 335 335 336 344 344 355 355 355 357 360 369 369 369 371 372 374 381 382 382 385 388 396 402 406 407 411 414 414 424 424 426 426 426 429 430 431 431 431 436 438 440 442 443 444 445 448 451 451 451 452 453 459 461 468 471 472 472 472 477 482 484 495 497 498 500 502 503 506 509 510 511 516 522 527 527 529 539 539 541 544 545 551 554 555 555 557 558 559 561 562 564 566 567 568 571 580 580 581 581 584 587 598 599 600 600 608 612 614 615 615 619 621 622 626 626 628 630 634 637 638 640 651 652 656 657 658 658 660 664 665 667 667 669 672 672 683 683 683 686 694 695 695 697 697 708 709 712 715 718 724 727 727 728 729 734 737 743 743 743 745 750 750 754 754 765 766 766 766 768 771 772 773 778 784 785 786 786 788 789 793 795 796 798 808 811 811 812 814 814 825 828 832 833 837 840 844 846 846 853 853 855 857 863 864 871 874 879 881 882 882 894 896 899 899 899 901 901 902 903 903 904 910 916 921 923 924 925 935 936 939 940 941 943 943 945 947 949 953 954 962 964 965 967 970 970 972 981 982 985 992 994 1000 1002 1004 1010 1010 1011 1017 1018 1029 1031 1032 1033 1033 1036 1038 1038 1040 1041 1046 1049 1050 1052 1056 1062 1064 1068 1071 1073 1081 1082 1083 1085 1089 1090 1096 1097 1098 1100 1101 1102 1103 1107 1109 1111 1111 1114 1131 1133 1138 1139 1141 1146 1148 1148 1148 1155 1163 1165 1167 1169 1169 1177 1183 1184 1188 1198 1199 1201 1202 1205 1209 1210 1214 1217 1217 1218 1219 1219 1220 1222 1224 1226 1227 1229 1234 1236 1239 1240 1248 1248 1259 1270 1270 1272 1276 1277 1283 1288 1295 1295 1295 1298 1305 1310 1312 1312 1314 1317 1323 1329 1330 1330 1332 1333 1334 1335 1346 1347 1347 1349 1349 1354 1354 1354 1366 1366 1369 1369 1373 1373 1376 1385 1387 1388 1398 1401 1401 1401 1406 1406 1411 1413 1415 1425 1426 1432 1433 1447 1451 1460 1460 1461 1462 1463 1466 1467 1469 1470 1476 1482 1482 1483 1484 1486 1486 1494 1500 1500 1502 1503 1504 1513 1520 1522 1522 1527 1529 1534 1535 1537 1538 1540 1543 1544 1553 1562 1562 1562 1569 1589 1590 1591 1593 1596 1597 1599 1600 1603 1605 1605 1607 1607 1610 1613 1614 1625 1630 1640 1640 1641 1648 1648 1650 1653 1659 1664 1665 1667 1670 1671 1672 1672 1677 1681 1690 1691 1691 1696 1699 1701 1704 1711 1712 1716 1718 1721 1724 1728 1733 1736 1754 1754 1756 1763 1768 1775 1776 1776 1778 1783 1783 1785 1796 1800 1800 1804 1805 1806 1806 1809 1811 1815 1817 1818 1824 1825 1827 1828 1834 1835 1839 1839 1846 1857 1857 1867 1877 1886 1891 1896 1904 1904 1910 1910 1912 1913 1914 1916 1917 1925 1928 1929 1933 1934 1937 1937 1938 1943 1943 1948 1955 1960 1962 1967 1971 1981 1986 1986 1987 1992 1995 1999 2005 2009 2014 2027 2031 2032 2038 2038 2040 2041 2041 2044 2047 2051 2056 2062 2066 2068 2073 2080 2081 2084 2084 2099 2100 2101 2103 2109 2115 2118 2120 2120 2122 2123 2130 2141 2142 2142 2144 2150 2151 2152 2159 2165 2169 2169 2169 2181 2187 2194 2212 2213 2215 2221 2221 2226 2227 2230 2231 2231 2238 2240 2248 2248 2252 2252 2255 2257 2259 2265 2265 2272 2272 2272 2278 2279 2288 2292 2297 2309 2312 2315 2316 2328 2330 2334 2336 2340 2350 2355 2355 2362 2367 2367 2368 2368 2373 2376 2377 2380 2385 2385 2386 2396 2405 2416 2419 2419 2425 2437 2438 2439 2441 2443 2443 2448 2449 2451 2458 2465 2467 2470 2476 2483 2484 2487 2499 2504 2508 2513 2522 2524 2524 2532 2536 2544 2544 2547 2550 2554 2556 2561 2562 2566 2570 2571 2571 2575 2589 2590 2593 2595 2595 2595 2599 2600 2607 2607 2612 2637 2645 2650 2659 2661 2663 2671 2675 2678 2683 2684 2692 2699 2703 2703 2703 2708 2708 2710 2718 2720 2721 2723 2727 2732 2736 2736 2749 2760 2762 2774 2774 2775 2776 2778 2781 2787 2798 2806 2807 2812 2816 2819 2833 2836 2839 2839 2845 2849 2849 2855 2864 2873 2877 2877 2879 2887 2888 2889 2890 2891 2896 2909 2910 2912 2915 2935 2935 2935 2946 2948 2950 2954 2976 2976 2983 2986 2994 3002 3003 3005 3006 3006 3016 3019 3019 3022 3024 3025 3026 3033 3038 3040 3063 3065 3073 3077 3085 3089 3091 3105 3106 3122 3132 3134 3134 3134 3134 3139 3147 3151 3152 3153 3154 3156 3161 3162 3162 3169 3188 3191 3193 3205 3210 3218 3221 3226 3233 3233 3250 3253 3259 3262 3263 3266 3267 3269 3289 3290 3290 3298 3304 3317 3319 3320 3321 3338 3340 3346 3349 3355 3361 3361 3361 3368 3372 3388 3390 3390 3400 3403 3413 3417 3432 3445 3447 3448 3453 3457 3460 3469 3470 3474 3477 3489 3491 3496 3501 3503 3505 3516 3516 3524 3531 3548 3550 3560 3560 3573 3576 3582 3584 3585 3587 3602 3606 3607 3621 3624 3629 3632 3633 3644 3653 3659 3663 3672 3673 3677 3678 3688 3689 3697 3700 3713 3721 3734 3743 3743 3749 3760 3761 3768 3772 3772 3791 3792 3792 3806 3814 3814 3816 3817 3817 3820 3831 3834 3856 3862 3871 3877 3885 3888 3905 3905 3917 3919 3919 3920 3920 3927 3929 3942 3945 3945 3976 3976 3984 3987 3991 4016 4032 4032 4033 4044 4046 4048 4055 4055 4057 4058 4073 4089 4090 4104 4104 4115 4131 4144 4160 4161 4168 4172 4174 4175 4185 4186 4188 4202 4203 4203 4243 4243 4245 4259 4274 4288 4289 4289 4299 4300 4302 4315 4316 4356 4360 4371 4371 4372 4373 4387 4401 4415 4417 4417 4446 4472 4484 4486 4486 4486 4488 4499 4503 4503 4516 4545 4557 4560 4587 4599 4600 4612 4616 4617 4631 4644 4670 4674 4688 4713 4715 4715 4730 4759 4772 4787 4801 4802 4816 4828 4843 4843 4858 4860 4915 4917 4930 4956 4971 4975 4986 5031 5032 5043 5084 5103 5114 5144 5146 5160 5215 5231 5259 5274 5288 5330 5387 5402 5458 5515 5586'.split()
print(Score(peptide,[int(spectrum) for spectrum in spectra]))